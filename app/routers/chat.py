from fastapi import APIRouter, HTTPException
from app.models.schemas import ChatRequest, ChatResponse
from app.services.chat_service import chat_service

router = APIRouter()

@router.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest):
    """Handle chat requests for French cybersecurity assistance"""
    try:
        print(f"üí¨ Received chat request: {request.message[:50]}...")
        
        # Validate request
        if not request.message or not request.message.strip():
            raise HTTPException(
                status_code=400,
                detail="Le message ne peut pas √™tre vide"
            )
        
        # Check if chat service is ready
        if not chat_service.is_ready():
            raise HTTPException(
                status_code=503, 
                detail="Le service de chat n'est pas pr√™t. Veuillez v√©rifier le chargement du mod√®le."
            )
        
        # Process the chat request
        response = chat_service.chat(request)
        
        print(f"‚úÖ Chat response generated successfully")
        print(f"üìä Sources found: {len(response.sources)}")
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Chat error: {str(e)}")
        raise HTTPException(
            status_code=500, 
            detail=f"Erreur lors du traitement de votre message: {str(e)}"
        )

@router.get("/chat/status")
async def get_chat_status():
    """Get chat service status and model information"""
    try:
        status = chat_service.get_model_status()
        return {
            **status,
            "endpoints": {
                "chat": "/api/chat",
                "status": "/api/chat/status",
                "suggestions": "/api/chat/suggestions"
            }
        }
    except Exception as e:
        return {
            "error": str(e), 
            "status": "error",
            "message": "Erreur lors de la r√©cup√©ration du statut du service de chat"
        }

@router.get("/chat/suggestions")
async def get_chat_suggestions(count: int = 6):
    """Get suggested questions for French cybersecurity topics"""
    
    suggestions = [
        "Quelles sont les meilleures pratiques pour les mots de passe?",
        "Comment se prot√©ger contre le phishing?",
        "Qu'est-ce que l'authentification √† deux facteurs?",
        "Comment s√©curiser les donn√©es sensibles en entreprise?",
        "Quelles sont les exigences de la norme ISO 27001?",
        "Comment r√©agir en cas de violation de donn√©es?",
        "Quels sont les principaux types de cyberattaques?",
        "Comment mettre en place une politique de s√©curit√© informatique?",
        "Qu'est-ce qu'un plan de continuit√© d'activit√©?",
        "Comment sensibiliser les employ√©s √† la cybers√©curit√©?"
    ]
    
    return {
        "suggestions": suggestions[:count],
        "total_available": len(suggestions),
        "language": "french",
        "domain": "cybersecurity"
    }

@router.post("/chat/reset")
async def reset_conversation():
    """Reset the current conversation context"""
    try:
        # For now, this is a placeholder since our chat service is stateless
        # In the future, this could clear conversation history if we implement it
        return {
            "message": "Conversation r√©initialis√©e avec succ√®s",
            "status": "reset_complete",
            "timestamp": "now"
        }
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la r√©initialisation: {str(e)}"
        )